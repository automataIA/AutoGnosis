<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lightbi</title>
    <link>https://lightbi-hugo-theme.netlify.app/</link>
    <description>Recent content on Lightbi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>sample@gmail.com (Bino Kochumol Varghese)</managingEditor>
    <webMaster>sample@gmail.com (Bino Kochumol Varghese)</webMaster>
    <lastBuildDate>Thu, 27 Feb 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://lightbi-hugo-theme.netlify.app/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Predizione correntisti morosi</title>
      <link>https://lightbi-hugo-theme.netlify.app/post/predizione-correntisti-morosi/</link>
      <pubDate>Thu, 27 Feb 2020 00:00:00 +0000</pubDate>
      <author>sample@gmail.com (Bino Kochumol Varghese)</author>
      <guid>https://lightbi-hugo-theme.netlify.app/post/predizione-correntisti-morosi/</guid>
      <description>Presentazione Avvio presentazione fullscreen
Notebook 2. Raccolta dati ► 2.1. Identificazione delle fonti dati ► 2.2. Selezione delle fonti dati Il dataset in questione contiene informazioni relative a diversi clienti di una banca. Ogni cliente è identificato da un ID univoco, e sono registrati diversi attributi a loro associati.
Tra questi attributi, troviamo il LIMIT_BAL, ovvero l’importo di credito concesso al cliente, espresso in NT dollars. Viene inoltre registrato il GENERE del cliente, indicato tramite il valore 1 per il genere maschile e 2 per quello femminile.</description>
    </item>
    
    <item>
      <title>Classificazione di immagini</title>
      <link>https://lightbi-hugo-theme.netlify.app/post/classificatore-di-immagine-cnn/</link>
      <pubDate>Wed, 29 Jan 2020 00:00:00 +0000</pubDate>
      <author>sample@gmail.com (Bino Kochumol Varghese)</author>
      <guid>https://lightbi-hugo-theme.netlify.app/post/classificatore-di-immagine-cnn/</guid>
      <description>Presentazione Avvio presentazione fullscreen
Notebook import torchvision.transforms as transforms import torchvision import torch import torch.optim as optim import torch.nn.functional as F import matplotlib.pyplot as plt from IPython.display import clear_output transform = transforms.Compose([ transforms.RandomHorizontalFlip(), transforms.ToTensor(), transforms.Normalize((0.5,), (0.5,)) ]) train_dataset = torchvision.datasets.FashionMNIST(root=&amp;#39;data/&amp;#39;, train=True, download=True, transform=transform) test_dataset = torchvision.datasets.FashionMNIST(root=&amp;#39;data/&amp;#39;, train=False, download=True, transform=transform) val_ratio = 0.2 val_size = int(val_ratio * len(train_dataset)) train_size = len(train_dataset) - val_size train_dataset, val_dataset = torch.utils.data.random_split(train_dataset, [train_size, val_size]) import torch.nn as nn class GrayScaleCNN(nn.</description>
    </item>
    
    <item>
      <title>Predizione Costo Immobili in New Taipei</title>
      <link>https://lightbi-hugo-theme.netlify.app/post/predizione-costo-immobili-in-new-taipei/</link>
      <pubDate>Mon, 27 Jan 2020 00:00:00 +0000</pubDate>
      <author>sample@gmail.com (Bino Kochumol Varghese)</author>
      <guid>https://lightbi-hugo-theme.netlify.app/post/predizione-costo-immobili-in-new-taipei/</guid>
      <description>Presentazione Avvio presentazione fullscreen
Notebook 2. Raccolta dati ► 2.1. Identificazione delle fonti dati ► 2.2. Selezione delle fonti dati # installo il pachetto per aprire il file xlsx !pip install openpyxl import pandas as pd # Adatto l&amp;#39;output stampato a schermo alla larghezza attuale della finestra from IPython.display import display, HTML display(HTML(&amp;#34;&amp;lt;style&amp;gt;.container { width:100% !important; }&amp;lt;/style&amp;gt;&amp;#34;)) pd.set_option(&amp;#34;display.width&amp;#34;, 1000) # Cambio la palette dei colori standard per adattarli alla palette del sito import matplotlib # definire i colori specificati dall&amp;#39;utente colors = [&amp;#34;#0077b5&amp;#34;, &amp;#34;#7cb82f&amp;#34;, &amp;#34;#dd5143&amp;#34;, &amp;#34;#00aeb3&amp;#34;, &amp;#34;#8d6cab&amp;#34;, &amp;#34;#edb220&amp;#34;, &amp;#34;#262626&amp;#34;] # cambiare la palette di colori di default matplotlib.</description>
    </item>
    
    <item>
      <title>Reinforced Learning - Imparare una ricetta</title>
      <link>https://lightbi-hugo-theme.netlify.app/post/reinforcing-learning-imparare-una-ricetta/</link>
      <pubDate>Mon, 27 Jan 2020 00:00:00 +0000</pubDate>
      <author>sample@gmail.com (Bino Kochumol Varghese)</author>
      <guid>https://lightbi-hugo-theme.netlify.app/post/reinforcing-learning-imparare-una-ricetta/</guid>
      <description>Introduzione al problema Lo script Python che ho scritto utilizza l’algoritmo di apprendimento rinforzato “Q-learning” per risolvere un problema di esplorazione di uno spazio di stati.
L’agente deve esplorare l’ambiente di gioco, prendere decisioni in ogni stato e massimizzare la sua ricompensa complessiva, seguendo una politica di scelta delle azioni che si basa sul valore Q degli stati e delle azioni possibili.
L’output dello script mostra la sequenza di azioni scelte dall’agente durante la sua esplorazione dell’ambiente di gioco, fino a raggiungere lo stato finale desiderato.</description>
    </item>
    
    <item>
      <title>sentiment analysis using transformers</title>
      <link>https://lightbi-hugo-theme.netlify.app/notes/change3/</link>
      <pubDate>Sun, 12 Jan 2020 00:00:00 +0000</pubDate>
      <author>sample@gmail.com (Bino Kochumol Varghese)</author>
      <guid>https://lightbi-hugo-theme.netlify.app/notes/change3/</guid>
      <description>Appunti con esempi per l’uso e la comprensione di Apache Spark in Python: Introduzione a Apache Spark Architettura di Apache Spark Installazione e configurazione di Apache Spark SparkSQL: l’interfaccia SQL di Spark DataFrames e Dataset in Spark Spark Streaming: l’elaborazione di dati in tempo reale Spark MLlib: libreria per il machine learning in Spark Spark GraphX: libreria per l’elaborazione di grafi in Spark Apache Spark e Hadoop: integrazione con l’Hadoop Distributed File System (HDFS) Gestione della distribuzione dei dati e del carico di lavoro in Spark Debugging e ottimizzazione di applicazioni Spark Utilizzo di Spark con altri framework e tecnologie (ad es.</description>
    </item>
    
    <item>
      <title>sentiment analysis using transformers</title>
      <link>https://lightbi-hugo-theme.netlify.app/post/sentiment-analysis-using-transformers/</link>
      <pubDate>Sun, 12 Jan 2020 00:00:00 +0000</pubDate>
      <author>sample@gmail.com (Bino Kochumol Varghese)</author>
      <guid>https://lightbi-hugo-theme.netlify.app/post/sentiment-analysis-using-transformers/</guid>
      <description>Costruire un classificatore di sentiment Introduzione ai Transformers L’analisi del sentiment è un tipo di problema dell’elaborazione del linguaggio naturale che consiste nel determinare se un testo ha un sentiment positivo o negativo. Questo compito non è così facile come si potrebbe pensare, perché il linguaggio è per definizione molto intricato e complesso. Ciò è ancora più accentuato in questo tipo di insiemi di dati in cui si vuole valutare il sentiment sulla base di una recensione a testo libero, in quanto l’utente può scriverci qualsiasi cosa decida.</description>
    </item>
    
  </channel>
</rss>
